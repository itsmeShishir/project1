// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1713944395115030106),
      name: 'User',
      lastPropertyId: const IdUid(8, 1937162875096691677),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(2, 3479936693261480253),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4610943348659341779),
            name: 'fullname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 892026730853408267),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 442335237640750370),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2962576233733769820),
            name: 'uid',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(8, 1937162875096691677),
            name: 'userId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 1471929634361544169))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 1713944395115030106),
      lastIndexId: const IdUid(1, 1471929634361544169),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [4568945269675665685, 5184714562307741351],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.uid,
        setId: (User object, int id) {
          object.uid = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final fullnameOffset = object.fullname == null
              ? null
              : fbb.writeString(object.fullname!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          fbb.startTable(9);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, fullnameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, passwordOffset);
          fbb.addInt64(6, object.uid);
          fbb.addOffset(7, userIdOffset);
          fbb.finish(fbb.endTable());
          return object.uid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              fullname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              uid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.username]
  static final username = QueryStringProperty<User>(_entities[0].properties[0]);

  /// see [User.fullname]
  static final fullname = QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[0].properties[2]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[0].properties[3]);

  /// see [User.uid]
  static final uid = QueryIntegerProperty<User>(_entities[0].properties[4]);

  /// see [User.userId]
  static final userId = QueryStringProperty<User>(_entities[0].properties[5]);
}
